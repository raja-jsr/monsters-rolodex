{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAIaA,EAAO,SAACC,GAAD,OACf,sBAAKC,UAAU,iBAAf,UACG,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,6BACtB,mCAAOL,EAAMI,QAAQE,KAArB,OACA,kCAAMN,EAAMI,QAAQG,MAApB,WCFKC,EAAW,SAAAR,GACpB,OAAQ,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1B,cAAC,EAAD,CAAyBA,QAASA,GAAtBA,EAAQC,UCN1BM,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACtC,OAAO,uBACHZ,UAAU,SACVa,KAAK,SACLF,YAAeA,EACfG,SAAWF,MCoCJG,E,kDApCb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IAJJ,E,qDAQb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAASc,S,oBAIxC,WAAS,IAAD,SAC4BE,KAAKR,MAA/BR,EADF,EACEA,SAAUS,EADZ,EACYA,YACZQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GAAO,OAC/CA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAEjD,OACE,sBAAK3B,UAAU,MAAf,UACC,mDACA,cAAC,EAAD,CACEW,YAAY,iBACZC,aAAe,SAAAiB,GAAO,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAG9D,cAAC,EAAD,CAAUvB,SAAWiB,W,GA9BXO,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.64379033.chunk.js","sourcesContent":["import React from 'react';\n\nimport '../card/card.style.css'\n\nexport const Card = (props) =>(\n     <div className=\"card-container\"> \n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&&size=180x180`} />\n        <h2> { props.monster.name } </h2> \n        <p> { props.monster.email } </p> \n     </div>\n)","import React from 'react';\n\nimport './card-list.style.css'\n\nimport {Card} from '../card/card.component'\n\nexport const CardList = props => {\n    return  <div className=\"card-list\">\n                {\n                    props.monsters.map(monster=> (\n                    <Card key={ monster.id } monster={monster} />\n                ))}\n            </div>;\n}\n\n"," import React from 'react';\n\n import './search-box.style.css';\n\n export const SearchBox = ({ placeholder, handleChange }) => {\n    return <input \n        className='search'\n        type='search'\n        placeholder= { placeholder } \n        onChange={ handleChange }\n    />\n }","import React,{Component} from 'react';\nimport './App.css';\n\nimport {CardList} from './components/card-list/card-list.component';\n\nimport {SearchBox} from './components/search-box/search-box.component'\n\nclass App extends Component{\n\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(users => this.setState({monsters:users}) )\n  }\n\n\n   render(){\n     const { monsters, searchField } = this.state;\n     const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n     return (\n       <div className='App'>\n        <h1> Monsters Rolodex</h1>\n        <SearchBox\n          placeholder='Search Monster' \n          handleChange={ e =>  {this.setState({ searchField: e.target.value }) }}\n        />\n\n        <CardList monsters={ filteredMonsters }></CardList>\n       </div>\n     )\n   }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}